ARG REPO_LOCATION=arm64v8
ARG DEBIAN_FRONTEND=noninteractive

#=========================================================================
FROM ${REPO_LOCATION}/ubuntu:20.04 AS base-0

#=========================================================================
FROM base-0 AS ubuntu-stage1
ARG DEBIAN_FRONTEND
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

RUN echo . \
	&& echo 'Etc/UTC' > /etc/timezone \
	&& ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \
	&& apt update \
	&& apt install -y --no-install-recommends \
		gnupg2 \
		ca-certificates \
		curl \
		wget \
		software-properties-common lsb-release \
	&& apt upgrade -y \
	&& wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - > /etc/apt/trusted.gpg.d/kitware.gpg \
	&& apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
	&& apt install kitware-archive-keyring \
	&& apt update && apt upgrade -y \
	&& apt install -y --no-install-recommends \
		tzdata \
		libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
		libgstreamer1.0-0 \
		libgstreamer1.0-dev \
		libgstreamer-plugins-base1.0-dev \
		libgstreamer-plugins-good1.0-dev \
		gstreamer1.0-plugins-base \
		gstreamer1.0-plugins-good \
		gstreamer1.0-plugins-bad \
		gstreamer1.0-libav \
		gstreamer1.0-tools \
		gir1.2-gst-rtsp-server-1.0 \
		ninja-build \
		dirmngr \
		build-essential \
		git \
		vim \
		nano \
		tmux \
		tilix \
		gdb \
		iputils-ping \
		usbutils \
		ncurses-dev \
		libyaml-cpp-dev \
		rsync \
		strace \
		sysstat \
		gdb \
		net-tools \
		dialog \
		chrony \
		nfs-common \
		corkscrew \
		v4l-utils \
		unzip \
		libsm6 \
		libxext6 \
		libxrender1 \
		libprotobuf-dev \
		protobuf-compiler \
		libprotoc-dev \
		graphviz \
		swig \
		curl \
		zip \
		pkg-config \
		libgtk-3-dev \
		libyaml-cpp-dev \
		autotools-dev \
		autoconf \
		automake \
		libtool \
		llvm clang \
		llvm-dev \
		qemu-system-x86 \
		cmake \
		clang-10 \
		libtinfo-dev \
		libc6-armhf-cross linux-libc-dev-armhf-cross \
		openjdk-11-jdk \
		fakeroot dh-make dh-python \
		libeigen3-dev \
                libopencv-dev \
		python3-pybind11 pybind11-dev \
		python3-pip \
		python3-dev \
		python3-numpy \
		python3-opencv \
	&& python3 -m pip install --upgrade pip \
	&& python3 -m pip install \
		meson \
		configparser \
		argparse \
		numpy \
		pybind11 \
		pycparser \
		streamlit \
		plotly==5.1.0 \
		jupyterlab \
		PyYAML \
		Dlr \
		matplotlib \
	&& echo .

####################
# TI compiler tools
####################
COPY /ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh /opt/
WORKDIR /opt

RUN echo . \
	&& chmod +x ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& rm ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& wget https://software-dl.ti.com/codegen/esd/cgt_public_sw/C6000/8.3.11/ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& chmod +x ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& rm ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& echo .

################
# ti-rpmsg-char
################
WORKDIR /opt
RUN echo . \
	&& git clone https://git.ti.com/cgit/rpmsg/ti-rpmsg-char \
	&& cd ti-rpmsg-char \
	&& aclocal \
	&& autoreconf -i \
	&& ./configure --prefix=/usr/local \
	&& make \
	&& make install \
	&& rm -rf /opt/ti-rpmsg-char \
	&& echo .

RUN echo . \
	&& python3 -m pip install --extra-index-url https://google-coral.github.io/py-repo/ tflite_runtime \
	&& echo .

##############
# Environment
##############
WORKDIR /root
RUN echo . \
    && echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile \
    && echo "    # include .bashrc if it exists"    >> .profile \
    && echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile \
    && echo "        . \"$HOME/.bashrc\""           >> .profile \
    && echo "    fi"                                >> .profile \
    && echo "fi"                                    >> .profile \
    && echo "#!/bin/bash"                           >  .bashrc  \
    && echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@j7-docker:\w\$ \"" >> .bashrc \
    && echo .

ENV WORK_DIR=/root/${HOME}

